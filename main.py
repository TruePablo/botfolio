import telebot
import sqlite3
import uuid

######################################################################################
#
#   ver: 1.0.3
#   Ready and work:
#   ban/unban, promo, give cash/take cash, give admin, link nickname
#
#       ||             ||
#       ||             ||
#       ||             ||
#
#
#       \              /
#        \____________/
#
#
#   TODO: Games, games counter, statistics, games amount, admins
#                                                                   https://t.me/noofme
######################################################################################




bot = telebot.TeleBot('5337208574:AAFfv0KdSS3tz1h3iSvm5umhvpYDQWx6Wx0')


team = telebot.types.InlineKeyboardMarkup()
minimenu = telebot.types.InlineKeyboardMarkup()
gamesmenu = telebot.types.InlineKeyboardMarkup()
matches1 = telebot.types.InlineKeyboardMarkup()
matches2 = telebot.types.InlineKeyboardMarkup()
matches3 = telebot.types.InlineKeyboardMarkup()
matchesbash = telebot.types.InlineKeyboardMarkup()
cabmenu = telebot.types.InlineKeyboardMarkup()
offermenu = telebot.types.InlineKeyboardMarkup()
understand = telebot.types.InlineKeyboardMarkup()
adminmenu = telebot.types.InlineKeyboardMarkup()
matchesmenu = telebot.types.InlineKeyboardMarkup()
mmenu = telebot.types.InlineKeyboardMarkup()
gameplay = telebot.types.InlineKeyboardMarkup()
admin_ids = []
admin_ids.append(5064936782)
promo = []
promos = []
promo_num = 0

balance = 0
balance_to_give = 0
balance_to_take = 0

to = 0
the = ''
bet = 0

code = ''

bannedmenu = telebot.types.ReplyKeyboardMarkup(True, True)
bannedmenu.row('–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É')
bbackmenu = telebot.types.InlineKeyboardMarkup()
maps = telebot.types.InlineKeyboardMarkup()
maps.add(telebot.types.InlineKeyboardButton(text='üåµMap Maker', callback_data='maker'))
maps.add(telebot.types.InlineKeyboardButton(text='üåæCanyon Rivers', callback_data='river'))
maps.add(telebot.types.InlineKeyboardButton(text='üåëFlying Fantasies', callback_data='fly'))


menu = telebot.types.ReplyKeyboardMarkup(True, True)
menu.row('–ú–µ–Ω—é')
menu.row('CHAT AND CHANNEL')
#KEYBOARDS
understand.add(telebot.types.InlineKeyboardButton(text='‚ùå –ü–æ–Ω—è—Ç–Ω–æ', callback_data='unders'))

adminmenu.add(telebot.types.InlineKeyboardButton(text='–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞', callback_data='give'))
adminmenu.add(telebot.types.InlineKeyboardButton(text='–û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞', callback_data='take'))
adminmenu.add(telebot.types.InlineKeyboardButton(text='–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='give_money'))
adminmenu.add(telebot.types.InlineKeyboardButton(text='–û—Ç–æ–∑–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='take_money'))
adminmenu.add(telebot.types.InlineKeyboardButton(text='–ü—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='promo'))
adminmenu.add(telebot.types.InlineKeyboardButton(text='–í—ã–≤–æ–¥—ã', callback_data='outcash'))
adminmenu.add(telebot.types.InlineKeyboardButton(text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä–∞', callback_data='blacklist'))
adminmenu.add(telebot.types.InlineKeyboardButton(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä–∞', callback_data='whitelist'))
adminmenu.add(telebot.types.InlineKeyboardButton(text='–ú–∞—Ç—á–∏', callback_data='mat'))

team.add(telebot.types.InlineKeyboardButton(text='üîµ', callback_data='blue'))
team.add(telebot.types.InlineKeyboardButton(text='üî¥', callback_data='red'))

game = telebot.types.InlineKeyboardButton('üïπ–ò–ì–†–´', callback_data='games')
sec = telebot.types.InlineKeyboardButton(text='üñ• –ö–∞–±–∏–Ω–µ—Ç', callback_data='cabin')
thir = telebot.types.InlineKeyboardButton(text=' üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info')
fo = telebot.types.InlineKeyboardButton(text='üë§ –ê–¥–º–∏–Ω', callback_data='admin')

minimenu.row(game)
minimenu.row(sec, thir)
minimenu.row(fo)

gamesmenu.add(telebot.types.InlineKeyboardButton(text='–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ', callback_data='idk'))
gamesmenu.add(telebot.types.InlineKeyboardButton(text='1 VS 1', callback_data='1v1'))
gamesmenu.add(telebot.types.InlineKeyboardButton(text='2 VS 2', callback_data='2v2'))
gamesmenu.add(telebot.types.InlineKeyboardButton(text='3 VS 3\n(–¢–£–†–ù–ò–†–´)', callback_data='3v3'))
gamesmenu.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))


bback = telebot.types.InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data='back')
bbackmenu.row(bback)
cabmenu.add(telebot.types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='addmoney'))
cabmenu.add(telebot.types.InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏', callback_data='withdraw'))
cabmenu.add(telebot.types.InlineKeyboardButton(text='–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='linkacc'))
cabmenu.add(telebot.types.InlineKeyboardButton(text='–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='fullstat'))
cabmenu.add(telebot.types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='use_promo'))
cabmenu.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))

offermenu.add(telebot.types.InlineKeyboardButton(text='QIWI', callback_data='qiwi'))
offermenu.add(telebot.types.InlineKeyboardButton(text='–Æ–º–∞–Ω–∏', callback_data='umoney'))
offermenu.add(telebot.types.InlineKeyboardButton(text='FREEKASSA', callback_data='free'))
offermenu.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))

matchesmenu.add(telebot.types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –º–∞—Ç—á', callback_data='create_maps'))
matchesmenu.add(telebot.types.InlineKeyboardButton(text='–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á', callback_data='plan_match'))
matchesmenu.add(telebot.types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç—á', callback_data='start_map'))

gameplay.add(telebot.types.InlineKeyboardButton(text='‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è', callback_data='connect'))
gameplay.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_games'))
checklink = False

users = sqlite3.connect('users.db', check_same_thread=False)
c = users.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS users (
usernames TEXT,
chatid BIGINT,
balance INT,
isbanned INT,
nickname TEXT,
islinked INT,
registred_to_match INT,
warns INT,
isadmin INT
)""")
c.execute("""CREATE TABLE IF NOT EXISTS matches (
mapname TEXT,
bet INT,
people INT,
peoplereg INT,
image_of_map_src TEXT,
type TEXT,
game_id INT NOT NULL PRIMARY KEY
)""")


users.commit()
print('DB users created/found')

for value in c.execute("SELECT game_id FROM 'matches' ORDER BY game_id DESC LIMIT 1"):
    i = 1
    to = int(value[0])
    while i <= to:
        for value in c.execute(f"SELECT mapname, bet, people, type, peoplereg FROM matches WHERE game_id = {i}"):
            if value[3] == '1v1':
                matches1.add(telebot.types.InlineKeyboardButton(text=f'{value[0]} | {value[1]} | {value[4]} / {value[2]}', callback_data=f'{i}'))
                i+=1
            if value[3] == '2v2':
                matches2.add(telebot.types.InlineKeyboardButton(text=f'{value[0]} | {value[1]} | {value[4]} / {value[2]}', callback_data=f'{i}'))
                i+=1
            if value[3] == '3v3':
                matches3.add(telebot.types.InlineKeyboardButton(text=f'{value[0]} | {value[1]} | {value[4]} / {value[2]}', callback_data=f'{i}'))
                i+=1
            if value[3] == '–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ':
                matchesbash.add(telebot.types.InlineKeyboardButton(text=f'{value[0]} | {value[1]} | {value[4]} / {value[2]}',
                                                                callback_data=f'{i}'))
                i += 1


@bot.message_handler(commands=['warn'])
def warnuser(message):
    for value in c.execute(f"SELECT isadmin FROM users WHERE chatid = '{message.chat.id}'"):
        if value[0] == 1:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω')
            bot.register_next_step_handler(message, warn2)
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞—Ä–Ω—ã!')
def warn2(message):
    c.execute(f"UPDATE users SET warns = warns + 1 WHERE usernames = '{message.text}'")
    bot.send_message(message.chat.id, '–í–∞—Ä–Ω –≤—ã–¥–∞–Ω.')
    for value in c.execute(f"SELECT warns, chatid FROM users WHERE usernames = '{message.text}'"):
        if value[0] >= 5:
            c.execute(f"UPDATE users SET isbanned = 1 WHERE usernames = '{message.text}'")
        bot.send_message(value[1], f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username} –≤—ã–¥–∞–ª –≤–∞—Ä–Ω. –í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: {value[0]}')
    users.commit()



@bot.message_handler(commands=['start'])
def start(message):
    global username
    c.execute(f"SELECT usernames FROM users WHERE usernames = '{message.from_user.username}'")
    if c.fetchone() is None:
        c.execute(f"INSERT INTO users VALUES ('{message.from_user.username}', '{message.chat.id}', '{0}', '{0}', '?', '{0}', '{0}', '{0}', {0})")
        users.commit()
    username = message.from_user.username
    for value in c.execute(f"SELECT isadmin FROM users WHERE chatid = '{message.chat.id}'"):
        if value[0] == 1:
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!', reply_markup=adminmenu)
        else:
            try:
                for value in c.execute(f"SELECT isbanned FROM users WHERE usernames = '{message.from_user.username}'"):
                    if value[0] == 1:
                        bot.send_message(message.chat.id, '–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ. –í–∞–º —Ç—É—Ç –Ω–µ —Ä–∞–¥—ã. ', reply_markup=bannedmenu)
                    else:
                        bot.send_message(message.chat.id, '‚ùóÔ∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∑–¥–µ—Å—å –ø—Ä–æ—Ö–æ–¥—è—Ç  —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –≤ Brawl Starts!', reply_markup=menu)
            except telebot.apihelper.ApiTelegramException:
                pass



@bot.message_handler(content_types=['text'])
def send_message(message):
    if message.text == 'CHAT AND CHANNEL':
        img = open('menuimg.PNG', 'rb')
        bot.send_photo(message.chat.id, img, caption='üî• –≠—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å, –∑–∞—Ö–æ–¥–∏ –±—ã—Å—Ç—Ä–µ–µ!\n'
                                          '\n'
                                          'üì¢ https://t.me/Brawl_Starts_Channel\n'
                                          'üí¨ https://t.me/Brawl_Starts_Chat', reply_markup=understand)

        img.close()
    if message.text == '–ú–µ–Ω—é':
        imgg = open('minimenuimg.PNG', 'rb')
        bot.send_photo(message.chat.id,imgg, caption=f'üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.username}!', reply_markup=minimenu)
        imgg.close()
def forwar(message):
    c.execute(f"UPDATE users SET isadmin = 1 WHERE usernames = '{message.text}'")
    users.commit()
    for value in c.execute(f"SELECT chatid FROM users WHERE usernames = '{message.text}'"):
        bot.send_message(value[0], '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞–º –≤—ã–¥–∞–Ω—ã –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞.')
    bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.')
def getidbymessage(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º')
    bot.register_next_step_handler(message, forwar)
def gege(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞:')
    bot.register_next_step_handler(message, givepromo)
def givepromo(message):
    promo.append(int(message.text))
    promos.append(str(uuid.uuid4()))
    bot.send_message(message.chat.id, f'–ü—Ä–æ–º–æ–∫–æ–¥: {promos[promo_num]}, –Ω–∞ —Å—É–º–º—É {promo[promo_num]} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.')
def use_promocode(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:')
    bot.register_next_step_handler(message, use_promocode2)
def use_promocode2(message):
    global balance
    i = 0
    for value in promos:
        if promos[i] == message.text:
            c.execute(f"SELECT chatid FROM users WHERE usernames = '{message.chat.id}'")
            if c.fetchone() is None:
                c.execute(f"UPDATE users SET balance = balance + {promo[promo_num]} WHERE chatid = {message.chat.id}")
                users.commit()
            bot.send_message(message.chat.id, '–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.')
        else:
            i+=1
            value+=1
def link_acc(message):
    if c.fetchone() is None:
        c.execute(f"UPDATE users SET islinked = 1 WHERE chatid = '{message.chat.id}'")
        c.execute(f"UPDATE users SET nickname = '{message.text}' WHERE chatid = '{message.chat.id}'")
        users.commit()
    bot.send_message(message.chat.id, '‚úÖ–ê–ö–ö–ê–£–ù–¢ –ü–†–ò–í–Ø–ó–ê–ù', reply_markup=cabmenu)
def sendmes(message):
    if int(message.text) < 51:
        bot.send_message(message.chat.id, '‚ùóÔ∏è–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 50 —Ä—É–±')
    if int(message.text) > 51:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', reply_markup=offermenu)
def sumgive(message):
    global balance_to_give
    balance_to_give = int(message.text)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, sumgive2)
def sumgive2(message):
    global balance_to_give
    userid = message.text
    for value in c.execute(f"SELECT chatid FROM users WHERE usernames = '{userid}'"):
        bot.send_message(value[0], f'–í—ã–¥–∞–Ω –±–∞–ª–∞–Ω—Å {balance_to_give} ')
        bot.send_message(message.chat.id, '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω.')
        chatid = value[0]
    if c.fetchone() is None:
        c.execute(f"UPDATE users SET balance = balance + {balance_to_give} WHERE chatid = {chatid}")
        users.commit()
def sumtake(message):
    global balance_to_take
    balance_to_take = int(message.text)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, sumtake2)
def sumtake2(message):
    global balance_to_take
    userid = message.text
    for value in c.execute(f"SELECT chatid FROM users WHERE usernames = '{userid}'"):
        bot.send_message(value[0], f'–û—Ç–æ–∑–≤–∞–Ω –±–∞–ª–∞–Ω—Å {balance_to_take} ')
        bot.send_message(message.chat.id, '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω.')
        chatid = value[0]
    if c.fetchone() is None:
        c.execute(f"UPDATE users SET balance = balance - {balance_to_take} WHERE chatid = {chatid}")
        users.commit()
def takemoney(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å')
    bot.register_next_step_handler(message, sumtake)
def givemoney(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å')
    bot.register_next_step_handler(message, sumgive)
def addtoblacklist(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å:')
    bot.register_next_step_handler(message, ban)
def ban(message):
    userid = message.text
    if c.fetchone() is None:
        c.execute(f"UPDATE users SET isbanned = 1 WHERE usernames = '{userid}'")
        users.commit()
    bot.send_message(message.chat.id, f'–Æ–∑–µ—Ä {userid} –∑–∞–±–∞–Ω–µ–Ω')
    for value in c.execute(f"SELECT chatid FROM users WHERE usernames = '{userid}'"):
        bot.send_message(value[0], '–í–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏')
def takefromblacklist(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞')
    bot.register_next_step_handler(message, unban)
def unban(message):
    userid = message.text
    if c.fetchone() is None:
        c.execute(f"UPDATE users SET isbanned = 0 WHERE usernames = '{userid}'")
        users.commit()
    bot.send_message(message.chat.id, f'–Æ–∑–µ—Ä {userid} —Ä–∞–∑–±–∞–Ω–µ–Ω')
    for value in c.execute(f"SELECT chatid FROM users WHERE usernames = '{userid}'"):
        bot.send_message(value[0], '–í–∞—Å —Ä–∞–∑–±–∞–Ω–∏–ª–∏, –≤–≤–µ–¥–∏—Ç–µ /start')
def create_map(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã')
    bot.register_next_step_handler(message, create_map2)
def create_map2(message):
    global mapname
    mapname = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∂–∏–º(1v1, 2v2, 3v3)')
    bot.register_next_step_handler(message, create_map3)
def create_map3(message):
    global numusers, Type
    Type = message.text
    if Type == '1v1':
        numusers = 2
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏')
        bot.register_next_step_handler(message, create_map4)
    if Type == '2v2':
        numusers = 4
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏')
        bot.register_next_step_handler(message, create_map4)
    if Type == '3v3':
        numusers = 6
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏')
        bot.register_next_step_handler(message, create_map4)
    if Type == '–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤')
        bot.register_next_step_handler(message, bash)
def bash(message):
    global numusers
    numusers = int(message.text)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏')
    bot.register_next_step_handler(message, create_map4)
def create_map4(message):
    global stavka
    stavka = int(message.text)
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã!')
    bot.register_next_step_handler(message, create_map_photo)
def create_map_photo(message):
    global mapname, stavka, numusers, to, Type
    try:
        bot.send_message(message.chat.id, '–ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.')
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = message.document.file_name;
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
            p1 = open(f'{message.document.file_name}', 'rb')
            bot.send_photo(message.chat.id, p1, caption=f'{mapname} | {stavka} | 0 / {numusers}')
        for value in c.execute("SELECT game_id FROM 'matches' ORDER BY game_id DESC LIMIT 1"):
            to = int(value[0])
        c.execute(f"INSERT INTO matches VALUES ('{mapname}', '{stavka}', '{numusers}', '{0}', '{message.document.file_name}', '{Type}', {to+1})")
        users.commit()
        if Type == '–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ':
            matchesbash.add(telebot.types.InlineKeyboardButton(text=f'{mapname} | {stavka} | 0 / {numusers}',
                                                       callback_data=f'{to+1}'))
        if Type == '1v1':
            matches1.add(telebot.types.InlineKeyboardButton(text=f'{mapname} | {stavka} | 0 / {numusers}',
                                                       callback_data=f'{to+1}'))
        if Type == '2v2':
            matches2.add(telebot.types.InlineKeyboardButton(text=f'{mapname} | {stavka} | 0 / {numusers}',
                                                            callback_data=f'{to + 1}'))
        if Type == '3v3':
            matches3.add(telebot.types.InlineKeyboardButton(text=f'{mapname} | {stavka} | 0 / {numusers}',
                                                            callback_data=f'{to + 1}'))
    except AttributeError:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª')
        bot.register_next_step_handler(message, create_map_photo)
def take(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞.')
    bot.register_next_step_handler(message, take2)
def take2(message):
    c.execute(f"UPDATE users SET isadmin = 0 WHERE usernames = '{message.text}'")
    users.commit()
    bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.')
#maybe
def start_match1(message):
    global code
    code = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –º–∞—Ç—á–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å:')
    bot.register_next_step_handler(message, start_match)
def start_match(message):
    global pic, mname, bbet, ppeople, Type, code
    mname = ''
    bbet = ''
    ppeople = ''
    Type = ''
    for value in c.execute(f"SELECT image_of_map_src FROM matches WHERE game_id = {int(message.text)}"):
        pic = value[0]
    for value in c.execute(f"SELECT mapname, bet, people, type FROM matches WHERE game_id = {int(message.text)}"):
        mname = value[0]
        bbet = value[1]
        ppeople = value[2]
        Type = value[3]
    for value in c.execute(f"SELECT chatid FROM users WHERE registred_to_match = {int(message.text)}"):
        bot.send_message(value[0], f'ID –º–∞—Ç—á–∞: {int(message.text)}\n'
                                   f'–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {code}')
        bot.send_photo(value[0], photo=open(f'{pic}', 'rb'), caption=f'{mname} | {bbet} | 0 / {ppeople}\n'
                                                                            f'{Type}')
    bot.send_message(message.chat.id, f'–ú–∞—Ç—á {int(message.text)} ID, –∑–∞–ø—É—â–µ–Ω.')
    bot.send_photo(message.chat.id, photo=open(f'{pic}', 'rb'), caption=f'{mname} | {bbet} | 0 / {ppeople}\n'
                                                                        f'{Type}')

@bot.callback_query_handler(func=lambda call: True)
def mm(call):
    try:
        global pic, mname, bbet, ppeople, regged
        regged = 0
        mname = ''
        bbet = ''
        ppeople = ''
        print(c.fetchall())
        print(call.data)
        for value in c.execute(f"SELECT mapname, bet, people, peoplereg, image_of_map_src FROM matches WHERE game_id = {call.data}"):
            mname = value[0]
            bbet = value[1]
            ppeople = value[2]
            regged = value[3]
            pic = value[4]
        bot.send_message(call.message.chat.id, f'ID –º–∞—Ç—á–∞: {call.data}')
        bot.send_photo(call.message.chat.id, photo=open(f'{pic}', 'rb'), caption=f'{mname} | {bbet} | {regged} / {ppeople}', reply_markup=gameplay)
    except sqlite3.OperationalError:
        step(call)
def step(call):
    global checklink, username, balance, bet

    for value in c.execute("SELECT game_id FROM matches"):
        if call.data in value:
            mm(call)
    if call.data == 'back_to_games':
        bot.send_message(call.message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=gamesmenu)
    if call.data == 'start_map':
        bot.send_message(call.message.chat.id, '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É –≤ –∏–≥—Ä–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–π')
        bot.register_next_step_handler(call.message, start_match1)
    if call.data == 'take':
        take(call.message)
    if call.data == 'create_maps':
        create_map(call.message)
    if call.data == 'blue':
        c.execute(f"UPDATE users SET registred_to_match = {value[0]} WHERE chatid = '{call.message.chat.id}'")
        c.execute(f"UPDATE matches SET peoplereg = peoplereg + 1 WHERE game_id = {value[0]}")
        users.commit()
        bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É –∑–∞ —Å–∏–Ω—é—é –∫–æ–º–∞–Ω–¥—É. –û–∂–∏–¥–∞–π—Ç–µ –µ—ë –Ω–∞—á–∞–ª–∞.')
    if call.data == 'connect':
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', reply_markup=team)
    if call.data == 'maker':
        pass
    if call.data == 'create_match':
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:', reply_markup=maps)
    if call.data == 'mat':
        bot.send_message(call.message.chat.id, '–í—ã –≤ –º–µ–Ω—é –º–∞—Ç—á–µ–π, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=matchesmenu)
    if call.data == 'take_money':
        takemoney(call.message)
    if call.data == 'give_money':
        givemoney(call.message)
    if call.data == 'use_promo':
        use_promocode(call.message)
    if call.data == 'blacklist':
        addtoblacklist(call.message)
    if call.data == 'promo':
        gege(call.message)
    if call.data == 'whitelist':
        takefromblacklist(call.message)
    if call.data == 'give':
        getidbymessage(call.message)
    if call.data == 'unders':
        bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data == 'admin':
        imgg = open('minimenuimg.PNG', 'rb')
        bot.send_photo(call.message.chat.id,imgg, caption='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–≤—è–∑–∏:\n'
                                               '@HELPTOURNAMENTS',reply_markup=bback)
    if call.data == 'linkacc':
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º Brawl Starts, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –º—ã –Ω–∞—à–ª–∏ –≤–∞—Å.')
        bot.register_next_step_handler(call.message, link_acc)
    if call.data == 'withdraw':
        bot.send_message(call.message.chat.id, '–í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
    if call.data == 'qiwi':
        bot.send_message(call.message.chat.id, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
    if call.data == 'free':
        bot.send_message(call.message.chat.id, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
    if call.data == 'umoney':
        bot.send_message(call.message.chat.id, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
    if call.data == 'addmoney':
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:')
        bot.register_next_step_handler(call.message, sendmes)
    if call.data == 'games':
        imgg = open('minimenuimg.PNG', 'rb')
        bot.send_photo(call.message.chat.id,imgg, caption='–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∏–≥—Ä—ã:', reply_markup=gamesmenu)
    if call.data == 'back':
        imgg = open('minimenuimg.PNG', 'rb')
        for value in c.execute(f"SELECT usernames FROM users WHERE chatid = '{call.message.chat.id}'"):
            bot.send_photo(call.message.chat.id, imgg, caption=f'üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {value[0]}!',
                       reply_markup=minimenu)
        imgg.close()
    if call.data == 'idk':
        bot.send_message(call.message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=matchesbash)
    if call.data == '1v1':
        bot.send_message(call.message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=matches1)
    if call.data == '2v2':
        bot.send_message(call.message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=matches2)
    if call.data == '3v3':
        bot.send_message(call.message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=matches3)
    if call.data == 'cabin':
        global balance
        for value in c.execute(f"SELECT balance FROM users WHERE chatid = '{call.message.chat.id}'"):
            bal = value[0]
            for value in c.execute(f"SELECT nickname FROM users WHERE chatid = '{call.message.chat.id}'"):
                if value[0] == '?':
                    imgg = open('minimenuimg.PNG', 'rb')
                    bot.send_photo(call.message.chat.id, imgg,caption=f'üÜî –í–∞—à id: {call.message.chat.id}\n'
                                                           f'üí∞ –ë–∞–ª–∞–Ω—Å: {bal} RUB\n'
                                                           f'‚ôª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: 0\n'
                                                           f'üí≥ –°—É–º–º–∞ –∏–≥—Ä: 0 RUB\n'
                                                           f'üìä –†–µ–π—Ç–∏–Ω–≥: ?\n'
                                                           f'–ê–∫–∫–∞—É–Ω—Ç Brawl Starts ‚ùå –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n', reply_markup=cabmenu)
                else:
                    imgg = open('minimenuimg.PNG', 'rb')
                    bot.send_photo(call.message.chat.id, imgg, caption=f'üÜî –í–∞—à id: {call.message.from_user.id}\n'
                                                       f'üí∞ –ë–∞–ª–∞–Ω—Å: {bal} RUB\n'
                                                       f'‚ôª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: 0\n'
                                                       f'üí≥ –°—É–º–º–∞ –∏–≥—Ä: 0 RUB\n'
                                                       f'üìä –†–µ–π—Ç–∏–Ω–≥: ?\n'
                                                       f'–ê–∫–∫–∞—É–Ω—Ç Brawl Starts ‚úÖ –ø—Ä–∏–≤—è–∑–∞–Ω.\n', reply_markup=cabmenu)
    if call.data == 'info':
        imgg = open('minimenuimg.PNG', 'rb')
        bot.send_photo(call.message.chat.id, imgg)
        bot.send_message(call.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–≥—É—Ç –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–º —Ç—É—Ä–Ω–∏—Ä–µ, —á—Ç–æ, —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å, –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ.\n'
                                               '\n'
                                               '–ü—Ä–∞–≤–∏–ª–∞:\n'
                                               '‚ûñ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n'
                                               '‚ûñ –ü—Ä–∏ –∏–≥—Ä–µ 1VS1 –ë–æ–µ—Ü –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–∫–∞–º–∏, –µ—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –º–∏–Ω—É—Ç –æ–Ω–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å, —Ç–æ –≤ —Ö–æ–¥ –≤—Å—Ç—É–ø–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä\n'
                                               '‚óè –ü—Ä–∏ –∏–≥—Ä–µ 2VS2 –ë–æ–π—Ü—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–∫–∞–º–∏, –µ—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –º–∏–Ω—É—Ç –æ–Ω–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å, —Ç–æ –≤ —Ö–æ–¥ –≤—Å—Ç—É–ø–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä.\n'
                                               '‚óè –ü—Ä–∏ –∏–≥—Ä–µ 3VS3 –ë–æ–π—Ü—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–∫–∞–º–∏. (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–Ω—ã–µ)\n'
                                               '‚ûñ –ï—Å–ª–∏ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É (–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ, 1VS1, 2VS2, 3VS3) –Ω–æ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–∏–π—Ç–∏ –∏–∑-–∑–∞ —Å–≤–æ–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤, —Ç–æ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç.\n'
                                               '‚ûñ –ï—Å–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —á–µ–ª–æ–≤–µ–∫ –Ω–µ –ø—Ä–æ–∂–º—ë—Ç –∫–Ω–æ–ø–∫—É "–≥–æ—Ç–æ–≤"  —Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∏–∫, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n'
                                               '‚ûñ –ï—Å–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ 2VS2, 3VS3, —á–µ–ª–æ–≤–µ–∫—É –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏–π—Ç–∏ –∏ –æ—Ç—ã–≥—Ä–∞—Ç—å —Å–æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π, —Ç–æ —Ç—É—Ä–Ω–∏—Ä –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—â–∞—è —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –∫—Ç–æ –æ–∂–∏–¥–∞–ª –º–∞—Ç—á–∞, –∫—Ä–æ–º–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫—Ç–æ —Å–æ—Ä–≤–∞–ª —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.\n'
                                               '‚ûñ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ 5-10% (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞) \n'
                                               '‚ûñ –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª –ø–æ —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä, —Ç–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á—ë—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è. \n'
                                               '‚ûñ –°–ª–∏–≤–∞—Ç—å –∫–æ–¥ —Ä—É–º—ã (–∫–æ–º–Ω–∞—Ç—ã) 3 –ª–∏—Ü–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –±–∞–Ω –≤ –±–æ—Ç–µ –∏ –∫–∏–∫ —Å —Ç—É—Ä–Ω–∏—Ä–∞, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏.\n'
                                               '\n'
                                               '–ü—Ä–∞–≤–∏–ª–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π:\n'
                                               '‚ûñ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –°—Ç—Ä–∞–Ω, –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤, –í–ª–∞—Å—Ç–µ–π, –ñ–∏—Ç–µ–ª–µ–π –∏.—Ç.–¥ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. (4 –≤–∞—Ä–Ω–∞/–∫–∏–∫ —Å —á–∞—Ç–∞)\n'
                                               '‚ûñ –ù–∞—Ü–∏–∑–º –∑–∞–ø—Ä–µ—â–µ–Ω. (–∫–∏–∫ —Å —á–∞—Ç–∞)\n'
                                               '‚ûñ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. (3 –≤–∞—Ä–Ω–∞/–∫–∏–∫ —Å —á–∞—Ç–∞)\n'
                                               '‚ûñ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. (2 –≤–∞—Ä–Ω–∞)\n'
                                               '‚ûñ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —Ä–æ–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—á–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. (–∫–∏–∫ —Å —á–∞—Ç–∞)\n'
                                               '‚ûñ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. (–∫–∏–∫ —Å —á–∞—Ç–∞, –∫–∞–Ω–∞–ª–∞ –∏ –±–∞–Ω –≤ –±–æ—Ç–µ, –ø—Ä–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ä–∞–∑–±–∞–Ω —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ –∏ –∫–∞–Ω–∞–ª–µ)\n', reply_markup=bbackmenu)



bot.polling()